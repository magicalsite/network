{"version":3,"sources":["components/Messages/Messages.module.css","hoc/withAuthRedirect.js","components/Messages/MessagesItem/MessagesItem.js","components/Messages/MessagesText/MessagesText.js","components/Messages/Messages.js","components/Messages/MessagesContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","MessagesItem","className","s","userName","active","id","name","MessagesText","letter","message","maxLength30","maxLength","FormMessagesRedux","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","placeholder","validate","required","component","TextArea","type","Messages","dialogItems","dialog","map","key","messagesItems","messages","center__part","users","addMessage","compose","messagesPage","messagesData","dialogData"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,aAAe,+BAA+B,SAAW,2BAA2B,QAAU,0BAA0B,OAAS,yBAAyB,OAAS,2B,6GCGjLC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAmBZE,IAfiB,SAACC,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAI,eAJV,GAEXC,IAAML,WAUtC,OAF4BM,YAAQX,EAARW,CAAoCL,K,+FCVrDM,EANM,SAACJ,GAClB,OACI,yBAAKK,UAAWC,IAAEC,SAAW,IAAMD,IAAEE,QAAQ,kBAAC,IAAD,CAASP,GAAI,aAAeD,EAAMS,IAAKT,EAAMU,QCInFC,EANM,SAACX,GAClB,OACI,yBAAKK,UAAWC,IAAEM,QAASZ,EAAMa,U,0CC0BrCC,EAAcC,YAAU,IAgBxBC,EAAoBC,YAAU,CAACC,KAAM,WAAYC,gBAJnC,SAACC,EAAQC,GACvBA,EAASC,YAAM,eAGKL,EAdL,SAACjB,GAChB,OACI,0BAAMuB,SAAUvB,EAAMwB,cAClB,kBAACC,EAAA,EAAD,CAAOf,KAAK,UAAUgB,YAAY,sGAAsBC,SAAU,CAACC,IAAUd,GAAce,UAAWC,IAAUC,KAAK,SACrH,8FAYGC,EAzCE,SAAChC,GAEd,IAAIiC,EAAcjC,EAAMkC,OAAOC,KAAI,SAAAD,GAAM,OAAM,kBAAC,EAAD,CAAcE,IAAKF,EAAOzB,GAAIC,KAAMwB,EAAOxB,KAAMD,GAAIyB,EAAOzB,QACvG4B,EAAgBrC,EAAMsC,SAASH,KAAI,SAAAtB,GAAO,OAAM,kBAAC,EAAD,CAAcuB,IAAKvB,EAAQJ,GAAII,QAASA,EAAQA,aAOpG,OACI,yBAAKR,UAAWC,IAAEiC,cACvB,yBAAKlC,UAAWC,IAAEkC,OACJP,GAEL,yBAAK5B,UAAWC,IAAEO,SACbwB,EACD,kBAACrB,EAAD,CAAmBO,SAXd,SAACe,GACdtC,EAAMyC,WAAWH,EAASzB,e,wBCDnB6B,sBACXvC,aARkB,SAACV,GACnB,MAAO,CACH6C,SAAU7C,EAAMkD,aAAaC,aAC7BV,OAAQzC,EAAMkD,aAAaE,cAKN,CACrBJ,iBAEJ7C,IAJW8C,CAKbV","file":"static/js/3.1ce9b33f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"center__part\":\"Messages_center__part__2I84t\",\"userName\":\"Messages_userName__2yBJi\",\"message\":\"Messages_message__sGvMN\",\"letter\":\"Messages_letter__2Mmsb\",\"active\":\"Messages_active__1Xzv2\"};","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    \r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n            \r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let AuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return AuthRedirectComponent;\r\n}\r\n\r\nexport default withAuthRedirect;","import React from 'react';\r\nimport s from './../Messages.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst MessagesItem = (props) => {\r\n    return (\r\n        <div className={s.userName + ' ' + s.active}><NavLink to={'/messages/' + props.id}>{props.name}</NavLink></div>\r\n    )\r\n}\r\n\r\nexport default MessagesItem;","import React from 'react';\r\nimport s from './../Messages.module.css';\r\n\r\n\r\nconst MessagesText = (props) => {\r\n    return (\r\n        <div className={s.letter}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default MessagesText;","import React from 'react';\r\nimport s from './Messages.module.css';\r\nimport MessagesItem from './MessagesItem/MessagesItem';\r\nimport MessagesText from './MessagesText/MessagesText';\r\nimport { Field, reduxForm, reset } from 'redux-form';\r\nimport { TextArea } from '../common/Forms';\r\nimport { maxLength, required } from '../../utils/validators/validators';\r\n\r\n\r\nconst Messages = (props) => {\r\n    \r\n    let dialogItems = props.dialog.map(dialog => ( <MessagesItem key={dialog.id} name={dialog.name} id={dialog.id}/> ));\r\n    let messagesItems = props.messages.map(message => ( <MessagesText key={message.id} message={message.message} /> ));\r\n\r\n\r\n    let addMessage = (messages) => {\r\n        props.addMessage(messages.message);\r\n    }\r\n    \r\n    return (\r\n        <div className={s.center__part}>\r\n\t\t\t<div className={s.users}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={s.message}>\r\n                {messagesItems}\r\n                <FormMessagesRedux onSubmit={addMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet maxLength30 = maxLength(30);\r\n\r\nlet FormMessages = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name=\"message\" placeholder=\"Введите сообщение..\" validate={[required, maxLength30]} component={TextArea} type=\"text\" />\r\n            <button>Отправить</button>  \r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nlet afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('messages'));\r\n}\r\n\r\nlet FormMessagesRedux = reduxForm({form: 'messages', onSubmitSuccess: afterSubmit})(FormMessages)\r\n\r\nexport default Messages;","import React from 'react';\r\nimport {addMessage} from './../../redux/messages-reducer';\r\nimport Messages from './Messages';\r\nimport {connect} from 'react-redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagesPage.messagesData,\r\n        dialog: state.messagesPage.dialogData\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        addMessage\r\n    }),\r\n    withAuthRedirect\r\n)(Messages);"],"sourceRoot":""}